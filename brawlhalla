#!/bin/bash

### HELP STUFF ###

prog_name=$(basename "$0")

ask_confirm() {
    # ask for confirm with message
    answer=""
    # loop until a real answer is given
    while true; do
        read -r -p "Enter [yes/no]: " answer
        if [ "$answer" == "yes" ]; then
            return 0
        elif [ "$answer" == "no" ]; then
            return 1
        else
            echo "Please answer with yes or no."
        fi
    done
}

### SUBCOMMAND profiles ###

PROFILES_DIR="$HOME/.brawlhalla/profiles"
ACTIVE_PROFILE_DIR="$(wslpath "$(wslvar APPDATA)")/BrawlhallaAir/Local Store/"

sub_profiles_list() {
    for file in "$PROFILES_DIR"/*; do
        if [ -d "$file" ]; then
            echo "$(basename "$file")"
        fi
    done
}

sub_profiles_save() {
    save_name="$1"
    selected_profile_dir="$PROFILES_DIR/$save_name"
    if [ -d "$selected_profile_dir" ]; then
        echo "Profile $save_name already exists. Do you want to overwrite the existing profile?"
        if ! ask_confirm; then
            echo "Did not save profile."
            return
        fi
    fi
    mkdir -p "$selected_profile_dir"
    rm -rf --preserve-root "${selected_profile_dir:?}"/* 2>/dev/null
    cp -rf "$ACTIVE_PROFILE_DIR/"* "$selected_profile_dir" >/dev/null
    echo "Saved active profile to $save_name."
}

sub_profiles_load() {
    save_name="$1"
    selected_profile_dir="$PROFILES_DIR/$save_name"
    if ! [ -d "$selected_profile_dir" ]; then
        echo "Profile $save_name does not exist."
        return
    fi
    cp -rf "$selected_profile_dir"/* "$ACTIVE_PROFILE_DIR" >/dev/null
    echo "Profile $save_name is now active."
}

sub_profiles_delete() {
    save_name="$1"
    selected_profile_dir="$PROFILES_DIR/$save_name"
    if ! [ -d "$selected_profile_dir" ]; then
        echo "Profile $save_name does not exist."
        return
    fi
    echo "Are you sure you want to delete profile $save_name?"
    if ! ask_confirm; then
        echo "Did not delete profile."
        return
    fi
    rm -rf "$selected_profile_dir"
    echo "Profile $save_name was deleted."
}

sub_profiles_help() {
    echo "Usage: $prog_name profiles <subcommand>"
    echo ""
    echo "Subcommands:"
    echo "list"
    echo "save <save_name>"
    echo "load <profile>"
    echo "delete <profile>"
    echo ""
}

sub_profiles() {
    subcommand="$1"
    case "$subcommand" in
    "" | "-h" | "--help")
        sub_profiles_help
        ;;
    "list" | "save" | "load" | "delete")
        shift
        sub_profiles_"${subcommand}" "$@"
        ;;
    *)
        echo "Error: '$subcommand' is not a known subcommand." >&2
        echo "Run '$prog_name --help' for a list of known subcommands." >&2
        exit 1
        ;;
    esac
}

### SUBCOMMAND track ###

TRACK_DIR="$HOME/.brawlhalla/tracking"
TRACK_RANDOM_FILE="$HOME/.brawlhalla/tracking/random.txt"
ALL_LEGENDS=";bodvar;cassidy;orion;lord_vraxx;gnash;queen_nai;hattori;sir_roland;scarlet;thatch;ada;sentinel;lucien;teros;brynn;asuri;barraza;ember;azoth;koji;ulgrim;diana;jhala;kor;wu_shang;val;ragnir;cross;mirage;nix;mordex;yumiko;artemis;caspian;sidra;xull;kaya;isaiah;jiro;lin_fei;zariel;rayman;dusk;fait;thor;petra;vector;volkov;onyx;jaeyun;mako;magyar;reno;munin;arcadia;ezio;tezca;thea;red_raptor;loki;seven;vivi;imugi;king_zuva;priya;"

sub_track_random() {
    legend_name="$1"
    if [[ $ALL_LEGENDS != *";$legend_name;"* ]]; then
        echo "Error: '$legend_name' is not a valid legend name." >&2
        exit 1
    fi
    mkdir -p "$TRACK_DIR"
    echo "$legend_name" >>"$TRACK_RANDOM_FILE"
    echo "Tracked random legend $legend_name."
}

sub_track_help() {
    echo "Usage: $prog_name track <subcommand>"
    echo ""
    echo "Subcommands:"
    echo "random <legend_name>"
    echo ""
}

sub_track() {
    subcommand="$1"
    case "$subcommand" in
    "" | "-h" | "--help")
        sub_track_help
        ;;
    "random")
        shift
        sub_track_"${subcommand}" "$@"
        ;;
    *)
        echo "Error: '$subcommand' is not a known subcommand." >&2
        echo "Run '$prog_name --help' for a list of known subcommands." >&2
        exit 1
        ;;
    esac
}

### MAIN ###

sub_help() {
    echo "Usage: $prog_name <subcommand>"
    echo ""
    echo "Subcommands:"
    echo "profiles"
    echo "track"
    echo ""
}

subcommand="$1"
case "$subcommand" in
"" | "-h" | "--help")
    sub_help
    ;;
"profiles")
    shift
    sub_"${subcommand}" "$@"
    ;;
"track")
    shift
    sub_"${subcommand}" "$@"
    ;;
*)
    echo "Error: '$subcommand' is not a known subcommand." >&2
    echo "Run '$prog_name --help' for a list of known subcommands." >&2
    exit 1
    ;;
esac
